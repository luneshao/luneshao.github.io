<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on lune&#39;s garden</title>
    <link>https://luneshao.github.io/tags/vue/</link>
    <description>Recent content in vue on lune&#39;s garden</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 May 2020 14:27:32 +0800</lastBuildDate>
    
	<atom:link href="https://luneshao.github.io/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vue 中异步加载 AMap</title>
      <link>https://luneshao.github.io/2020/2020-05-26-vue-amap/</link>
      <pubDate>Tue, 26 May 2020 14:27:32 +0800</pubDate>
      
      <guid>https://luneshao.github.io/2020/2020-05-26-vue-amap/</guid>
      <description>前言 最近在优化之前写的网站，FP 大概要半分钟才能加载出来，emmm，我写的。。。
这个也是之前文章优化的一部分，因为我的网页中有用到地图，之前用的 vue-amap 组件，后来觉得这个引用 cdn 不知道怎么下手，就改成了直接用节点渲染，不用组件了。然后又查了异步加载的方式，发现了一个解决方案，但是后期又发现了这个解决方案的一些 bug，一通百度加自己尝试修改了一下。
正文 先贴一下原文的解决方案:
 1. 创建一个 AMap.js,路径&amp;rsquo;src/assets/js/AMap.js&amp;rsquo;  // src/assets/js/AMap.js export default function MapLoader() { // &amp;lt;-- 原作者这里使用的是module.exports return new Promise((resolve, reject) =&amp;gt; { if (window.AMap) { resolve(window.AMap) } else { var script = document.createElement(&#39;script&#39;) script.type = &#39;text/javascript&#39; script.async = true script.src = &#39;http://webapi.amap.com/maps?v=1.3&amp;amp;callback=initAMap&amp;amp;key=yourkey&#39; script.onerror = reject document.head.appendChild(script) } window.initAMap = () =&amp;gt; { resolve(window.AMap) } }) }  2. 在任何.vue 文件中使用 // test.</description>
    </item>
    
    <item>
      <title>Vue 优化</title>
      <link>https://luneshao.github.io/2020/2020-05-20-vue-perf/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/2020/2020-05-20-vue-perf/</guid>
      <description>1、字体包压缩 使用 fontmin 这个库压缩字体包。（字体下载地址 字体下载网 ，这个下载的苹方简-常规可以被格式化。）
2、图片使用懒加载 使用 vue-lazyload 库优化图片加载，滚动到某处再加载图片。
3、打包线上版本，使用cdn引入包 // -------------- // .env // -------------- NODE_ENV === &#39;production&#39; // -------------- // vue.config.js // -------------- const isProd = process.env.NODE_ENV === &#39;production&#39; const assetsCDN = { // webpack build externals externals: { vue: &#39;Vue&#39;, &#39;vue-router&#39;: &#39;VueRouter&#39;, &#39;vue-lazyload&#39;: &#39;VueLazyload&#39;, }, css: [&#39;//cdn.jsdelivr.net/npm/animate.css@3.7.2/animate.min.css&#39;], // https://unpkg.com/browse/vue@2.6.10/ js: [ &#39;//cdn.jsdelivr.net/npm/vue@2.6.11/dist/vue.min.js&#39;, &#39;//cdn.jsdelivr.net/npm/vue-router@3.1.6/dist/vue-router.min.js&#39;, &#39;//cdn.jsdelivr.net/npm/vue-lazyload@1.3.3/vue-lazyload.min.js&#39;, ] } module.exports = { configureWebpack: config =&amp;gt; { if (isProd) { return { resolve: { alias: { &#39;@ant-design/icons/lib/dist$&#39;: resolve(&#39;.</description>
    </item>
    
    <item>
      <title>vue 笔记</title>
      <link>https://luneshao.github.io/2020/2020-03-20-vue/</link>
      <pubDate>Fri, 20 Mar 2020 10:36:26 +0800</pubDate>
      
      <guid>https://luneshao.github.io/2020/2020-03-20-vue/</guid>
      <description> 不要在选项属性或回调上使用箭头函数，比如 created: () =&amp;gt; console.log(this.a) 或 vm.$watch(&amp;lsquo;a&amp;rsquo;, newValue =&amp;gt; this.myMethod())。因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。
 可以在二级目录线上部署项目
// vue.config.js module.exports = { publicPath: &#39;./&#39;, }  </description>
    </item>
    
    <item>
      <title>Vue CLI中配置使用Mock数据</title>
      <link>https://luneshao.github.io/2019/vue-cli-mock/</link>
      <pubDate>Tue, 09 Jul 2019 16:27:20 +0800</pubDate>
      
      <guid>https://luneshao.github.io/2019/vue-cli-mock/</guid>
      <description>引言
 鉴于对 Vue CLI 中 webpack 的链式配置一直不熟悉，mock 也没有用过。最近项目需要 mock 数据，所以新建了一个测试项目配置了一下。下面我会介绍配置流程。👇👇👇 (webpack 没理解透彻T_T)
参考文献：
 Vue CLI 文档 webpack-chain 文档 webpack 配置文档 http-proxy-middleware 文档 mockjs-webpack-plugin 文档  文章结构：
+ 配置流程 + Step 1. 安装插件 mockjs-webpack-plugin + Step 2. 配置 webpack 配置项 + Step 3. Mock 数据  配置流程 这里我就默认民那桑已经用 Vue CLI 安装了一个项目。我使用的 Vue CLI 3。
Step 1. 安装插件 mockjs-webpack-plugin  这个插件通过 webpack 插件的方式，快速搭建项目的 mock 服务，用于前后端分离模式下的并行开发。emmm，是公司大佬用的这个，至于为什么我还没敢问 -_-
yarn add mockjs-webpack-plugin --dev 或 cnpm install --save-dev mockjs-webpack-plugin  安装完成后，新建存放 mock 数据的文件夹及文件。文档</description>
    </item>
    
  </channel>
</rss>