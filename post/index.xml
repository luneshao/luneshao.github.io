<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on luneS&#39;s garden</title>
    <link>https://luneshao.github.io/post/</link>
    <description>Recent content in Posts on luneS&#39;s garden</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://luneshao.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>小程序云开发</title>
      <link>https://luneshao.github.io/post/miniprogram/</link>
      <pubDate>Mon, 10 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/miniprogram/</guid>
      <description>引言
 最近和一个小姐姐在互相监督学习，所以想找一个工具打卡使用。没有找到那种到手即用的，就自己做一个了。结果，审核未通过。为啥呢，因为没好好看限制内容，个人的账号可以做的东西很少，文档敬上。
不过过程中遇到的一些问题，打算记录下来。希望能帮助看到这篇文章的你避免一些坑吧。
文章目录：
 页面开发 组件开发 字体图标 云函数  —————————— 一个渣渣前端的独白
1.页面开发  1.使用 this.setData({}) 赋值。
 2.页面向函数传参使用 dataset。请戳官方文档
  &amp;lt;!-- page.html --&amp;gt; &amp;lt;view data-index=&#39;{{index}}&#39; bindtap=&amp;quot;handelItemDel&amp;quot;&amp;gt; {{ item }} &amp;lt;/view&amp;gt;  // page.js handelItemDel(e) { let { selArr } = this.data const index = e.target.dataset.index selArr.splice(index, 1) this.setData({ selArr: selArr }) },   3.在 app.json 中，page 项数组的第一个页面是小程序的主页（即第一个跳转到的页面）。  2.组件开发 在 miniprogram 的目录下新建一个 components 文件夹，在文件夹内创建 组件。在页面中引用时，需要在页面的 json 文件中引入组件。key 值就是在页面中引入的标签名。</description>
    </item>
    
    <item>
      <title>强大的css filter属性及色彩名词（附 opacity 属性的兼容写法）</title>
      <link>https://luneshao.github.io/post/css-filter/</link>
      <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/css-filter/</guid>
      <description>引言
 最近公司需要找一个管理项目的工具，然后被推荐了 coding.net，我就看了一下官网的功能介绍。看到合作伙伴那里，hover 之后，图片变了颜色。然后，职业病就犯了，就看了一下人家是怎么实现的。
讲道理，我找了半天是怎么换的颜色。filter 这个属性之前看到是用来兼容 ie 的 opacity 属性的，我也一直没有用过，就以为它就是透明度的属性，我就没勾掉试一试。。。有点愚蠢。我就以为是换了图片的 URL，结果图片的 URL 并没有变化。我查看了图片，它本来的颜色就是彩色的。然后猜测，难道是利用 css 改变了图片的颜色？？？我就挨个属性勾了勾，果然是 filter 的原因。。
默认的 css 属性中，有这么一句 filter: grayscale(100%); ，这就是让图片变灰的属性。然后，就滚去 MDN 了。首屏就是几个例子，我又震惊了！这个属性可以做这么多事！！上一次震惊是在发现了 object-fit 属性，竟然可以改变图片内容的尺寸！
（文档真的要认真看，仔细看，可能某个小括号里边就提供了一种简便方法或者功能介绍。）
本篇主要是摘要了 MDN 的 filter 属性、取值及示例图以及关于色相、饱和度、灰度的概念。末尾附上了一份 opacity 的兼容性写法。
定义 filter：滤镜。
filter CSS属性将模糊或颜色偏移等 图形效果应用于元素 。滤镜通常用于调整图像，背景和边框的渲染。 CSS标准里包含了一些已实现预定义效果的函数。你也可以参考一个SVG滤镜，通过一个URL链接到SVG滤镜元素(SVG filter element)。
语法 共分为四类。具体的我就不搬运了，下面具体介绍。形式语法
/* 自定义的 SVG 滤镜 */ .filter: url(&amp;quot;filters.svg#filter-id&amp;quot;) /* 滤镜函数 */ blur、brightness、contrast、drop-shadow、grayscale、hue-rotate invert、opacity、saturate、sepia .filter: blur(5px); /* 混合滤镜 */ filter: contrast(175%) brightness(3%); /* Global values */ filter: inherit; filter: initial; filter: unset;  函数 url: URL函数接受一个XML文件，该文件设置了一个 SVG滤镜 ，且可以包含一个锚点来指定一个具体的滤镜元素.</description>
    </item>
    
    <item>
      <title>window.requestAnimationFrame方法</title>
      <link>https://luneshao.github.io/post/window-requestanimationframe/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/window-requestanimationframe/</guid>
      <description>原文链接伯乐 MDN
概念 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。
个人理解：raf 这个函数可以用来做动画，它需要一个参数，参数的形式是一个回调函数，在回调函数里可以写需要执行的动画。
这个回调函数会默认接收一个参数，即执行回调函数时的时间戳，回调函数，会在每次浏览器在下次重绘前执行回调函数更新动画，个人认为这样来保证动画的帧率和稳定性。大多数电脑显示器的刷新频率是60Hz，大概相当于每秒钟重绘60次，相当于每帧的执行时间为 16.67ms。
特性  参数中的回调函数执行次数通常是每秒60次，速度大约为 16.67ms 每帧。
 当requestAnimationFrame()运行在后台标签页或者隐藏的&amp;lt;iframe&amp;gt; 里时，requestAnimationFrame() 会被暂停调用。对比 setTimeout ，离开页面依旧会计时，raf 更加节省性能。
 DOMHighResTimeStamp指示由 RequestAnimationFrame() 排队的回调开始触发的时间。
 它返回一个整数，表示定时器的编号，这个值可以传递给 cancelAnimationFrame 用于取消这个函数的执行。
  使用方法 window.requestAnimationFrame(callback) function callback (timeStamp) { // 默认接收参数 timeStamp，表示开始执行回调函数的时刻 // 若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用window.requestAnimationFrame() window.requestAnimationFrame(callback) }  避免一帧多次调用 let ifCurFra = false // 当前帧是否执行 function cb (timeStamp) { if (ifCurFra) return ifCurFra = true window.requestAnimationFrame(timeStamp =&amp;gt; { ifCurFra = false }) } window.</description>
    </item>
    
    <item>
      <title>CSS Tranform 的 Matrix函数</title>
      <link>https://luneshao.github.io/post/css-matrix/</link>
      <pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/css-matrix/</guid>
      <description>插播一句：translate 的百分比是相对于自身的宽高计算的。
插播2：计算角度值 eg：已知 sin(a) = 1，求 a？。 a = Math.asin(1) * 180 / Math.PI
 引言
 这也是关于优化 js 代码衍生出来的内容，过程是这样的。
 文章里说 Array.from 代替 Array.prototype.slice.call(arrayLike)，😳Array.prototype.slice.call(arrayLike) 是不是截取数组的嘛，查了一下文档 MDN ，原来将这个方法绑定到类数组对象/集合上，就可以转化为一个数组。过程中，看到了这篇博客，大佬是真的🐂🍺，里边就写到了计算用window.getComputedStyle(dom, 伪类) 获取值，本来我是忽略过去的，但是，好奇心让我测试了一下。。得到了一个这个东西。  这是啥？我不认识啊？？还是乖乖的学一下吧。
translate 值的计算 于是学习了 张鑫旭前辈的文章，这是一个矩阵，是transform变换的基础。我们可以根据这个矩阵里面的值推算出，transform 属性的值。
其格式为：Matrix(a, b, c, d, e, f) 具体的介绍请直接看前辈文章的第五节。
借前辈图，translate &amp;amp; scale 的转换公式如下。 ：
 x, y ：表示转换元素的所有坐标（变量）矩阵偏移元素的中心点。 ax+cy+e ：变换后的x坐标 bx+dy+f ：变换后的y坐标  scale 值的计算 matrix(s, 0, 0, s, 0, 0); s 即为 scale 的值。</description>
    </item>
    
    <item>
      <title>=8 一些不常用的获取元素属性的操作</title>
      <link>https://luneshao.github.io/post/element-expland/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/element-expland/</guid>
      <description>1. 获取元素的css  1.1 window.getComputedStyle()  返回另一个包含所有 css 属性的对象，该对象应用了样式表并解析了基础计算（只读）。
window.getComputedStyle().getPropertyValue(&#39;font&#39;) // 获取属性 font 值  MDN 张鑫旭前辈的文章
css 安全(blog)
2.获取元素的大小及其相对于视口的位置  2.1 Element.getComputedStyle()  MDN
返回元素的大小及其相对于视口的位置。
如果你需要获得相对于整个网页左上角定位的属性值，那么只要给top、left属性值加上当前的滚动位置
（通过window.scrollX和window.scrollY），这样就可以获取与当前的滚动位置无关的值。
3.返回当前document对象所关联的window对象  3.1 document.defaultView  MDN
该属性返回当前 document 对象所关联的 window 对象，如果没有，会返回 null。
在许多在线的演示代码中，getComputedStyle是通过 document.defaultView 对象来调用的。大部分情况下，这是不需要的，因为可以直接通过window对象调用。但有一种情况，你必需要使用 defaultView, 那是在firefox3.6上访问子框架内的样式。</description>
    </item>
    
    <item>
      <title>=8 js 拓展</title>
      <link>https://luneshao.github.io/post/js-expland/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/js-expland/</guid>
      <description>1.Array 1.1 将类数组转化为数组  Array.prototype.slice.call() 方法：  MDN slice相关
slice 方法可以用来将一个类数组（Array-like）对象/集合转换成一个新数组。你只需将该方法绑定到这个对象上。
Array.slice(start, end) 方法用来截取数组 start 到 end （不包含 end）值，并返回一个新数组。
function list () { return Array.property.slice.call(arguments) } list(1, 2, 3)  除此以外可以使用 [].splice.call(arguments) 代替，也可以使用 bind 来简化过程。
const unboundSlice = Array.property.slice const slice = Function.property.bind.call(unboundSlice) function list () { return slice(arguments) } list(1, 2, 3)   Array.from 方法  MDN Array.from
Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例。</description>
    </item>
    
    <item>
      <title>CSS 的 clip 属性</title>
      <link>https://luneshao.github.io/post/css-clip/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/css-clip/</guid>
      <description>参考文献：MDN&amp;emsp; 张鑫旭前辈的文章
介绍 定义 clip 属性剪裁元素，属性仅应用于绝对定位元素，例如 position: absolute 或 position: fixed。
属性值  auto：不剪裁。
 &amp;lt;shape&amp;gt;：截取的形状，值的表示方式 rect(&amp;lt;top&amp;gt;, &amp;lt;right&amp;gt;, &amp;lt;bottom&amp;gt;, &amp;lt;left&amp;gt;) 或 rect(&amp;lt;top&amp;gt; &amp;lt;right&amp;gt; &amp;lt;bottom&amp;gt; &amp;lt;left&amp;gt;)。
  top &amp;amp; bottom 设置的是距离元素上边距的距离。left &amp;amp; right 设置的是距离元素左边距的距离。
左侧使用了clip属性，左右容器和图片的尺寸都是200 * 200。 top、right、bottom、left 的值可以是 数值 或 auto 。
tips：auto表示 If any side&amp;rsquo;s value is auto, the element is clipped to that side&amp;rsquo;s inside border edge. （文档） 截取到元素该边的内边界。
 inherit：从父元素继承 clip 属性的值，不兼容 IE6。   实例</description>
    </item>
    
    <item>
      <title>js Date 对象</title>
      <link>https://luneshao.github.io/post/js-date/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/js-date/</guid>
      <description>参考文献：MDN
常用方法 语法 new Date()： 返回一个 Date 对象
new Date(value)：
new Date(dateString)：
new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]])：
Date() : 以函数形式直接调用 Date()，返回一个字符串
new Date() 参数 (value)： 一个整数值，表示自1970年1月1日00:00:00 UTC（the Unix epoch）以来的毫秒数。
(dateString)： 表示日期的字符串值。
(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]])：
year：表示年份的整数值。
monthIndex：表示月份的整数值，从 0（1月）到 11（12月）。
day：表示一个月中的第几天的整数值，从1开始。
hours：小时数的整数值 (24小时制)。
minutes：时间中分钟部分的整数值。
seconds：时间中的秒部分的整数值。
milliseconds：时间的毫秒部分的整数值。
方法 Date.now()： 返回自 1970-1-1 00:00:00 UTC（世界标准时间）至今所经过的毫秒数。
Date.parse()： 解析一个表示日期的字符串，并返回从 1970-1-1 00:00:00 所经过的毫秒数。</description>
    </item>
    
    <item>
      <title>USB 接口类型</title>
      <link>https://luneshao.github.io/post/usb-types/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/usb-types/</guid>
      <description>USB: 通用串行总线（英语：Universal Serial Bus，缩写：USB）是连接计算机系统与外部设备的一种串口总线标准，也是一种输入输出接口的技术规范，
文档地址
   USB类型 对应图片     USB A-Type    USB B-Type    USB C-Type    Micro-USB A    Micro-USB B    USB Mini-b(5-pin)    USB Mini-b(4-pin)    USB 3.0 A-Type    USB 3.0 B-Type    USB 3.0 Micro B     </description>
    </item>
    
    <item>
      <title>hugo 介绍及使用</title>
      <link>https://luneshao.github.io/post/hugo-intro/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/hugo-intro/</guid>
      <description>引言 本篇文章简单介绍了 Hugo 的目录结构和博客内一些个性化内容(评论、音乐、google analyze)的实现。
使用 Hugo 生成博客还请大家移步至 Hugo中文文档，我看着挺清晰的，比英文文档好看啊&amp;hellip;
我目前使用的是 hugo-lamp 这个主题，绿绿的多好看😏。
1.Hugo 目录结构 原文连接
├── archetypes // 储存.md的模板文件，新建一个 .md 文件时，就会按此模版创建 ├── content // 储存网站的所有内容，写的文章存放在这里 ├── data // 储存数据文件供模板调用（目前没有用到过） ├── layouts // 储存.html模板（也莫的用） ├── static // 储存图片,css,js等静态文件，该目录下的文件会直接拷贝到/public ├── themes // 储存主题 └── config.toml // 配置文件  图片的引用 Hugo 的图片可以直接放在其 static/img 目录里面，其路径就是 /img/image_name.png。
[2019-06-12日更新]
众所周知，安装主题是在 themes 文件夹下，根据不同的主题，都会有相应的文档介绍，告诉我们怎么去写配置文件。此主题的文档在 /docs/guide.md，根据这个文档可以把自己的名字、签名、地址一系列安排的妥妥当当。
看到大神们有人在博客里放了评论、音乐，还使用了图床，就也想鼓捣。还有，我的博客没有被搜索引擎收录，我还得搞一搞。目前我已经添加了评论、音乐和 google analyze的功能，记录一下过程。
2.hugo 添加评论功能 [20190613 更新，我已经换掉了。换成 Valine 了。]
我使用的是 disqus。 参考文章，真的是极好。</description>
    </item>
    
    <item>
      <title>=8 浏览器易混淆名词整理</title>
      <link>https://luneshao.github.io/post/browser-num/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/browser-num/</guid>
      <description> 1.JS 的 window.location 对象 包含有关文档及当前位置的信息。
MDN文档地址
 location.origin: 包含页面来源的域名的标准形式，当前页面的域名 + 端口。 eg: https://www.baidu.com
 location.host: 当前页面的域名，可能最后带有一个“：”和端口。 eg: www.baidu.com
 location.hostname: 当前页面的域名。 eg: www.baidu.com
 location.protocol: 当前页面的协议。 eg: https
 location.assign(): 加载给定 URL 的内容到这个 Location对象所关联的对象上。
 location.reload(params): 重新加载当前页。params: t/f =&amp;gt; 服务器请求资源/缓存。
 location.replace(): 用给定的URL替换当前的资源，不会被保存历史。
  2.ajax 请求头中的属性 MDN文档地址
 Host: 服务器的域名（对于虚拟主机来说），以及（可选的）服务器监听的TCP端口号。 相关文章一个IP可以部署众多网站，分别解析不同的域名，host 指示访问哪个虚拟主机。
 Origin: 请求来自于哪个站点，该字段仅指示服务器名称，并不包含任何路径信息。
 Referer: 当前请求页面的来源页面的地址。B -&amp;gt; A, Referer: B.URL
  </description>
    </item>
    
    <item>
      <title>markdown 常用语法</title>
      <link>https://luneshao.github.io/post/markdown/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/markdown/</guid>
      <description> 列表 // 无序列表 * txt txt txt + txt txt txt - txt txt txt // 有序列表 1. txt txt txt 2. txt txt txt  引用 &amp;gt; txt txt txt  粗体 和 斜体 // 粗体 **txt** / __txt__ // 斜体 *txt* / _txt_  表格 | thead | thead | thead | | :---- | :---: | ----: | | 左对齐 | 居中 | 右对齐 |  分隔线 *** / - - - / * * *  </description>
    </item>
    
    <item>
      <title>前端属性兼容性整理</title>
      <link>https://luneshao.github.io/post/comp/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/comp/</guid>
      <description>1.document 相关 1.1 addEventListen
兼容写法：
function addEvt(eTarget, eType, eHandle) { if (eTarget.addEventListen) { eTarget.addEventListen(eType, eHandle) } else { // ie 浏览器 if (eTarget.attachEvent) { eType = &#39;on&#39; + eType eTarget.attachEvent(eType, eHandle) } else { eventTarget[&#39;on&#39; + eventType] = eventHandler } } }  1.2 scrollTop()
兼容写法：
// 因为 0 || undefine =&amp;gt; undefined const st = document.pageYOffset.scrollTop || document.documentElement.scrollTop || document.body.scrollTop || 0  // ie6/7/8 1. 没有 doctype 声明的页面： const st = document.</description>
    </item>
    
    <item>
      <title>Mac 的快捷键</title>
      <link>https://luneshao.github.io/post/mac-keyboard/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/mac-keyboard/</guid>
      <description>在知乎上截取部分自己会用到的一部分。
 按键符号
  ⌘ (command) ⌥ (option) ⇧ (shift) ⌃ (control) ⌫ (delete)   常用的快捷键
  快速调用 emoji 表情：⌘（command）+ ⌃（control）+ 空格键；   浏览器中将网页加入个人收藏：⌘（command）+ D；遇到喜欢的网页内容只需按下此快捷键即可加入收藏夹；
 截屏 + 录屏：⌘ （command）+ ⌥（option） + R 即可调出
 光标移到地址框：Command + L
  附：CheatSheet 下载地址
 以上。谢谢各位大佬的分享🤩
 </description>
    </item>
    
    <item>
      <title>蔬菜水煮建议时间</title>
      <link>https://luneshao.github.io/post/vegetable/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/vegetable/</guid>
      <description>要注意水煮时间要根据蔬菜的切块大小以及想追求的柔软程度，下面的时间仅是指导 (单位为分钟)：
 洋蓟(整个): 25-40
 洋蓟(芯儿): 10-15
 胡萝卜(整个): 15-20
 胡萝卜(整个): 5-10
 菜花 (整个): 10-15
 菜花: (掰成朵): 5-8
 玉米: 4-7
 茄子 (整个): 10-15
 茄子 (切块): 5-10
 蘑菇: 3-4
 洋葱 (整个): 20-30
 洋葱 (珍珠): 10-20
 欧防风: 5-10
 青椒: 4-5
 南瓜 (切片): 5-10
 西红柿: 1-3
 芜菁 (整个): 15-20
 芜菁 (小块): 5-8
 菜花: 4-6
 西兰花(掰成朵): 4-6</description>
    </item>
    
    <item>
      <title>每天一集TED 20190415</title>
      <link>https://luneshao.github.io/post/0415/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/0415/</guid>
      <description> 是什么让你睡不着觉？ 防止失眠的方法  治疗失眠最好的方法之一是，管理好会造成过度警觉的压力。  确保你的卧室十分舒爽，你的床只是用来睡觉，如果睡不着就去看会书、
冥想或者写日记。
 调节你的新陈代谢，做法是维持一贯的睡眠和起床作息，来协助调整你的生物钟。因为这个生物钟对光很敏感，所以夜间避免亮光。
 有些医生也会开一些药物，但是药物很容易上瘾，导致病情恶化。
 还有一些人是基因问题。（DSPD）
  以上。
欧亚斯密。
 (&amp;gt;^ω^&amp;lt;)
 </description>
    </item>
    
    <item>
      <title>初次见面</title>
      <link>https://luneshao.github.io/post/my-first-post/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://luneshao.github.io/post/my-first-post/</guid>
      <description>介绍 初次见面，请多多关照。 &amp;ndash;来自萌新的问候。（≧∇≦）
这样规定一下：
 标题带有 =3 的就是我有未看完的内容的 （ 怕不是都要带着了 23333
 标题带有 =8 的就是持续更新的文章
   （≧∇≦）
 来自萌新的问候 （≧∇≦）</description>
    </item>
    
  </channel>
</rss>